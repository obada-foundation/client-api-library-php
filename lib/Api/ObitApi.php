<?php
/**
 * ObitApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBADA Client Helper API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Obada\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Obada\ApiException;
use Obada\Configuration;
use Obada\HeaderSelector;
use Obada\ObjectSerializer;

/**
 * ObitApi Class Doc Comment
 *
 * @category Class
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObitApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation downloadObitFromChain
     *
     * Download Obit from Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse2004
     */
    public function downloadObitFromChain($uNKNOWNBASETYPE = null)
    {
        list($response) = $this->downloadObitFromChainWithHttpInfo($uNKNOWNBASETYPE);
        return $response;
    }

    /**
     * Operation downloadObitFromChainWithHttpInfo
     *
     * Download Obit from Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadObitFromChainWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $request = $this->downloadObitFromChainRequest($uNKNOWNBASETYPE);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse2004' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse2004', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse2004';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadObitFromChainAsync
     *
     * Download Obit from Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadObitFromChainAsync($uNKNOWNBASETYPE = null)
    {
        return $this->downloadObitFromChainAsyncWithHttpInfo($uNKNOWNBASETYPE)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadObitFromChainAsyncWithHttpInfo
     *
     * Download Obit from Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadObitFromChainAsyncWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse2004';
        $request = $this->downloadObitFromChainRequest($uNKNOWNBASETYPE);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadObitFromChain'
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function downloadObitFromChainRequest($uNKNOWNBASETYPE = null)
    {

        $resourcePath = '/server/obit/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uNKNOWNBASETYPE)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uNKNOWNBASETYPE));
            } else {
                $httpBody = $uNKNOWNBASETYPE;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchObitFromChain
     *
     * Get Obit From Blockchain
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse2002
     */
    public function fetchObitFromChain($obitDid)
    {
        list($response) = $this->fetchObitFromChainWithHttpInfo($obitDid);
        return $response;
    }

    /**
     * Operation fetchObitFromChainWithHttpInfo
     *
     * Get Obit From Blockchain
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchObitFromChainWithHttpInfo($obitDid)
    {
        $request = $this->fetchObitFromChainRequest($obitDid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchObitFromChainAsync
     *
     * Get Obit From Blockchain
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchObitFromChainAsync($obitDid)
    {
        return $this->fetchObitFromChainAsyncWithHttpInfo($obitDid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchObitFromChainAsyncWithHttpInfo
     *
     * Get Obit From Blockchain
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchObitFromChainAsyncWithHttpInfo($obitDid)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse2002';
        $request = $this->fetchObitFromChainRequest($obitDid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchObitFromChain'
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchObitFromChainRequest($obitDid)
    {
        // verify the required parameter 'obitDid' is set
        if ($obitDid === null || (is_array($obitDid) && count($obitDid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obitDid when calling fetchObitFromChain'
            );
        }

        $resourcePath = '/server/obit/{obit_did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obitDid !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obitDid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateObit
     *
     * Generate Obit
     *
     * @param  string $manufacturer Device Id (Required) (required)
     * @param  string $partNumber Part Number (Required) (required)
     * @param  string $serialNumber Serial Number (Required) (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse200
     */
    public function generateObit($manufacturer, $partNumber, $serialNumber)
    {
        list($response) = $this->generateObitWithHttpInfo($manufacturer, $partNumber, $serialNumber);
        return $response;
    }

    /**
     * Operation generateObitWithHttpInfo
     *
     * Generate Obit
     *
     * @param  string $manufacturer Device Id (Required) (required)
     * @param  string $partNumber Part Number (Required) (required)
     * @param  string $serialNumber Serial Number (Required) (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateObitWithHttpInfo($manufacturer, $partNumber, $serialNumber)
    {
        $request = $this->generateObitRequest($manufacturer, $partNumber, $serialNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse200' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse200';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateObitAsync
     *
     * Generate Obit
     *
     * @param  string $manufacturer Device Id (Required) (required)
     * @param  string $partNumber Part Number (Required) (required)
     * @param  string $serialNumber Serial Number (Required) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateObitAsync($manufacturer, $partNumber, $serialNumber)
    {
        return $this->generateObitAsyncWithHttpInfo($manufacturer, $partNumber, $serialNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateObitAsyncWithHttpInfo
     *
     * Generate Obit
     *
     * @param  string $manufacturer Device Id (Required) (required)
     * @param  string $partNumber Part Number (Required) (required)
     * @param  string $serialNumber Serial Number (Required) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateObitAsyncWithHttpInfo($manufacturer, $partNumber, $serialNumber)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse200';
        $request = $this->generateObitRequest($manufacturer, $partNumber, $serialNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateObit'
     *
     * @param  string $manufacturer Device Id (Required) (required)
     * @param  string $partNumber Part Number (Required) (required)
     * @param  string $serialNumber Serial Number (Required) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateObitRequest($manufacturer, $partNumber, $serialNumber)
    {
        // verify the required parameter 'manufacturer' is set
        if ($manufacturer === null || (is_array($manufacturer) && count($manufacturer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manufacturer when calling generateObit'
            );
        }
        // verify the required parameter 'partNumber' is set
        if ($partNumber === null || (is_array($partNumber) && count($partNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partNumber when calling generateObit'
            );
        }
        // verify the required parameter 'serialNumber' is set
        if ($serialNumber === null || (is_array($serialNumber) && count($serialNumber) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serialNumber when calling generateObit'
            );
        }

        $resourcePath = '/obit/generate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($manufacturer !== null) {
            if('form' === 'form' && is_array($manufacturer)) {
                foreach($manufacturer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['manufacturer'] = $manufacturer;
            }
        }
        // query params
        if ($partNumber !== null) {
            if('form' === 'form' && is_array($partNumber)) {
                foreach($partNumber as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['part_number'] = $partNumber;
            }
        }
        // query params
        if ($serialNumber !== null) {
            if('form' === 'form' && is_array($serialNumber)) {
                foreach($serialNumber as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['serial_number'] = $serialNumber;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObit
     *
     * Get Client Obit
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse2001
     */
    public function getObit($obitDid)
    {
        list($response) = $this->getObitWithHttpInfo($obitDid);
        return $response;
    }

    /**
     * Operation getObitWithHttpInfo
     *
     * Get Client Obit
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function getObitWithHttpInfo($obitDid)
    {
        $request = $this->getObitRequest($obitDid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObitAsync
     *
     * Get Client Obit
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObitAsync($obitDid)
    {
        return $this->getObitAsyncWithHttpInfo($obitDid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObitAsyncWithHttpInfo
     *
     * Get Client Obit
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObitAsyncWithHttpInfo($obitDid)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse2001';
        $request = $this->getObitRequest($obitDid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObit'
     *
     * @param  string $obitDid Required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObitRequest($obitDid)
    {
        // verify the required parameter 'obitDid' is set
        if ($obitDid === null || (is_array($obitDid) && count($obitDid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $obitDid when calling getObit'
            );
        }

        $resourcePath = '/client/obit/{obit_did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($obitDid !== null) {
            $resourcePath = str_replace(
                '{' . 'obit_did' . '}',
                ObjectSerializer::toPathValue($obitDid),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saveObit
     *
     * Save Client Obit
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse2001
     */
    public function saveObit($uNKNOWNBASETYPE = null)
    {
        list($response) = $this->saveObitWithHttpInfo($uNKNOWNBASETYPE);
        return $response;
    }

    /**
     * Operation saveObitWithHttpInfo
     *
     * Save Client Obit
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function saveObitWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $request = $this->saveObitRequest($uNKNOWNBASETYPE);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saveObitAsync
     *
     * Save Client Obit
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveObitAsync($uNKNOWNBASETYPE = null)
    {
        return $this->saveObitAsyncWithHttpInfo($uNKNOWNBASETYPE)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saveObitAsyncWithHttpInfo
     *
     * Save Client Obit
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saveObitAsyncWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse2001';
        $request = $this->saveObitRequest($uNKNOWNBASETYPE);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saveObit'
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function saveObitRequest($uNKNOWNBASETYPE = null)
    {

        $resourcePath = '/client/obit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uNKNOWNBASETYPE)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uNKNOWNBASETYPE));
            } else {
                $httpBody = $uNKNOWNBASETYPE;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadObit
     *
     * Upload Obit to Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Obada\ClientHelper\InlineResponse2003
     */
    public function uploadObit($uNKNOWNBASETYPE = null)
    {
        list($response) = $this->uploadObitWithHttpInfo($uNKNOWNBASETYPE);
        return $response;
    }

    /**
     * Operation uploadObitWithHttpInfo
     *
     * Upload Obit to Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \Obada\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Obada\ClientHelper\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadObitWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $request = $this->uploadObitRequest($uNKNOWNBASETYPE);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Obada\ClientHelper\InlineResponse2003' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Obada\ClientHelper\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Obada\ClientHelper\InlineResponse2003';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Obada\ClientHelper\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadObitAsync
     *
     * Upload Obit to Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadObitAsync($uNKNOWNBASETYPE = null)
    {
        return $this->uploadObitAsyncWithHttpInfo($uNKNOWNBASETYPE)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadObitAsyncWithHttpInfo
     *
     * Upload Obit to Blockchain
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadObitAsyncWithHttpInfo($uNKNOWNBASETYPE = null)
    {
        $returnType = '\Obada\ClientHelper\InlineResponse2003';
        $request = $this->uploadObitRequest($uNKNOWNBASETYPE);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadObit'
     *
     * @param  \Obada\ClientHelper\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadObitRequest($uNKNOWNBASETYPE = null)
    {

        $resourcePath = '/server/obit/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uNKNOWNBASETYPE)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uNKNOWNBASETYPE));
            } else {
                $httpBody = $uNKNOWNBASETYPE;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
