<?php
/**
 * Obit
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OBADA API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: techops@obada.io
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Obada\ClientHelper;

use \ArrayAccess;
use \Obada\ObjectSerializer;

/**
 * Obit Class Doc Comment
 *
 * @category Class
 * @description OBADA record.
 * @package  Obada
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Obit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Obit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'did' => 'string',
        'usn' => 'string',
        'owner' => 'string',
        'manufacturer' => 'string',
        'partNumber' => 'string',
        'serialNumberHash' => 'string',
        'trustAnchorToken' => 'string',
        'documents' => '\Obada\ClientHelper\DocumentLink[]',
        'checksum' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'did' => null,
        'usn' => null,
        'owner' => null,
        'manufacturer' => null,
        'partNumber' => null,
        'serialNumberHash' => null,
        'trustAnchorToken' => null,
        'documents' => null,
        'checksum' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'did' => 'did',
        'usn' => 'usn',
        'owner' => 'owner',
        'manufacturer' => 'manufacturer',
        'partNumber' => 'part_number',
        'serialNumberHash' => 'serial_number_hash',
        'trustAnchorToken' => 'trust_anchor_token',
        'documents' => 'documents',
        'checksum' => 'checksum'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'did' => 'setDid',
        'usn' => 'setUsn',
        'owner' => 'setOwner',
        'manufacturer' => 'setManufacturer',
        'partNumber' => 'setPartNumber',
        'serialNumberHash' => 'setSerialNumberHash',
        'trustAnchorToken' => 'setTrustAnchorToken',
        'documents' => 'setDocuments',
        'checksum' => 'setChecksum'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'did' => 'getDid',
        'usn' => 'getUsn',
        'owner' => 'getOwner',
        'manufacturer' => 'getManufacturer',
        'partNumber' => 'getPartNumber',
        'serialNumberHash' => 'getSerialNumberHash',
        'trustAnchorToken' => 'getTrustAnchorToken',
        'documents' => 'getDocuments',
        'checksum' => 'getChecksum'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['did'] = $data['did'] ?? null;
        $this->container['usn'] = $data['usn'] ?? null;
        $this->container['owner'] = $data['owner'] ?? null;
        $this->container['manufacturer'] = $data['manufacturer'] ?? null;
        $this->container['partNumber'] = $data['partNumber'] ?? null;
        $this->container['serialNumberHash'] = $data['serialNumberHash'] ?? null;
        $this->container['trustAnchorToken'] = $data['trustAnchorToken'] ?? null;
        $this->container['documents'] = $data['documents'] ?? null;
        $this->container['checksum'] = $data['checksum'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['manufacturer'] === null) {
            $invalidProperties[] = "'manufacturer' can't be null";
        }
        if ($this->container['partNumber'] === null) {
            $invalidProperties[] = "'partNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets did
     *
     * @return string|null
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param string|null $did OBADA decentralized identifier
     *
     * @return self
     */
    public function setDid($did)
    {
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets usn
     *
     * @return string|null
     */
    public function getUsn()
    {
        return $this->container['usn'];
    }

    /**
     * Sets usn
     *
     * @param string|null $usn Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated.
     *
     * @return self
     */
    public function setUsn($usn)
    {
        $this->container['usn'] = $usn;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.
     *
     * @return self
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string $manufacturer Waiting more specific details from Rohi
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string $partNumber Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)
     *
     * @return self
     */
    public function setPartNumber($partNumber)
    {
        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets serialNumberHash
     *
     * @return string|null
     */
    public function getSerialNumberHash()
    {
        return $this->container['serialNumberHash'];
    }

    /**
     * Sets serialNumberHash
     *
     * @param string|null $serialNumberHash Serial number hashed with sha256 hash function
     *
     * @return self
     */
    public function setSerialNumberHash($serialNumberHash)
    {
        $this->container['serialNumberHash'] = $serialNumberHash;

        return $this;
    }

    /**
     * Gets trustAnchorToken
     *
     * @return string|null
     */
    public function getTrustAnchorToken()
    {
        return $this->container['trustAnchorToken'];
    }

    /**
     * Sets trustAnchorToken
     *
     * @param string|null $trustAnchorToken JWT token from the trust anchor
     *
     * @return self
     */
    public function setTrustAnchorToken($trustAnchorToken)
    {
        $this->container['trustAnchorToken'] = $trustAnchorToken;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Obada\ClientHelper\DocumentLink[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Obada\ClientHelper\DocumentLink[]|null $documents To generate this link, take an SHA-256 hash of the document, and link to it as https://www.some-website.com?h1=hash-of-document. Note this does not yet adhere to the hashlink standard.
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets checksum
     *
     * @return string|null
     */
    public function getChecksum()
    {
        return $this->container['checksum'];
    }

    /**
     * Sets checksum
     *
     * @param string|null $checksum Hash calculated by SHA256 (previous Obit checksum + Obit data).
     *
     * @return self
     */
    public function setChecksum($checksum)
    {
        $this->container['checksum'] = $checksum;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


